model Modelopaper
uses "mmxprs","mmsheet"; !gain access to the Xpress-Optimizer solver

declarations
	!Indices
	numBarras = 5     
	numLineas = 4    
	numAgre = 4    
	numPeriodos = 24

	barras = 1..numBarras
	lineas = 1..numLineas
	agregadores = 1..numAgre
	periodos = 1..numPeriodos
	
	Tsub=16..24 !Tiempo disponible de EV
	
	!Parametros---------------------------------------------------------------------
	!precios mercado
	pi_e, pi_capup, pi_capdn, pi_milup, pi_mildn: array(periodos) of real
	pi_ek, pi_kcapup, pi_kcapdn, pi_kmilup, pi_kmildn: array(periodos,agregadores) of real
	!pi_ak1: array(peiodos) of real !se asume A={1} y se incluye en pi_ek
	
	!parametros mileage caiso
	s_dn, s_up, mu_up, mu_dn: array(periodos) of real
	
	!parametros DRAGs
	p_ak1_max	= 10
	r_k1_capupmax	=1
	r_k1_capdnmax 	=1
	
	!parametros ESAGs
	eta_di	=1	
	eta_ch	=1
	e_min	=2
	e_max	=10
	e_k20	=8    !carga inicial bateria
	dr_max	=5
	cr_max	=5
	
	!parametros EVCSs
	er_max	=5
	err_max	=0.5
	e_int	=2
	cl_max	=20 !no sale puse valor cualquiera
	gamma_ch=1	!no sale pero puse 1
	
	!parametros DDGAGs
	p_k4max	=5
	p_k4min	=0	
	ru	=1
	rd	=1
	
	!parametros power flow
	h:array(barras, agregadores) of integer
	h_sub:array(barras) of integer
	p_d, q_d: array(barras, periodos) of real !demanda fija
	a: array(lineas, barras) of integer
	r, x: array(lineas) of real
	c:array(barras, barras) of integer
	!paper no entrega el valor
	v_min=0 
	v_max=20000 
	pl_max=20000 
	ql_max=20000
	tan_phi_k1=0.2031	!para un cos(phi)=0.98
	tan_phi_k4=0.3287	!para un cos(phi)=0.95
	
	!Variables de decisiÃ³n-----------------------------------------------
	!variables FO
	p_sub,q_sub, r_subup, r_subdn: array(periodos) of mpvar
	p_k, r_kup, r_kdn: array(periodos, agregadores) of mpvar !incluye k1
	
	!variables DRAGs
	r_kcapup, r_kcapdn: array(periodos, agregadores) of mpvar !incluye k1
	
	!variables ESAGs
	e_k2,p_k2di,p_k2ch: array(periodos) of mpvar
	r_k2capup_di,r_k2capdn_ch, r_k2capdn_di,r_k2capup_ch: array(periodos) of mpvar
	b_k2: array(periodos) of mpvar !variable binaria
	
	!Variables EVCS
	b_k3: array(periodos) of mpvar !variable binaria
	!Variables DDGAG, ya estan todas
	
	!Variables distribution power flow
	pl, ql: array(lineas,periodos) of mpvar
	v: array(barras,periodos) of mpvar
	
	!funcion objetivo
	objetivo:linctr
	
end-declarations

!importar datos desde excel
initialisations from 'mmsheet.excel:'+'datos.xlsx'
	!precios
	pi_e		as "skiph;noindex;pi_e"
	pi_capup	as "skiph;noindex;pi_capup"
	pi_capdn	as "skiph;noindex;pi_capup"
	pi_milup 	as "skiph;noindex;pi_milup"
	pi_mildn	as "skiph;noindex;pi_milup"
	pi_ek		as "skiph;noindex;pi_ek"
	pi_kcapup	as "skiph;noindex;pi_kcapup"
	pi_kcapdn	as "skiph;noindex;pi_kcapup"
	pi_kmilup	as "skiph;noindex;pi_kmilup"
	pi_kmildn	as "skiph;noindex;pi_kmilup"
	s_up	as "skiph;noindex;s_up"
	s_dn	as "skiph;noindex;s_dn"
	mu_up	as "skiph;noindex;mu_up"
	mu_dn	as "skiph;noindex;mu_dn"
	!demanda fija
	p_d	as "skiph;noindex;p_d"
	q_d	as "skiph;noindex;p_q"
	!topologia red
	h	as "skiph;noindex;h"
	h_sub	as "skiph;noindex;h_sub"
	a	as "skiph;noindex;a"
	r	as "skiph;noindex;r_l"
	x	as "skiph;noindex;x_l"
	c	as "skiph;noindex;c_mn"
end-initializations

!Funcion objetivo 
objetivo:= sum(t in periodos)(-p_sub(t)*pi_e(t)-r_subup(t)*pi_capup(t)-r_subdn(t)*pi_capdn(t)- 
          r_subup(t)*s_up(t)*mu_up(t)*pi_milup(t)-r_subdn*s_dn(t)*mu_dn(t)*pi_mildn(t)+
          sum(k in agregadores|(k=2 or k=4))p_k(t,k)*pi_ek(t,k)-sum(k in agregadores|k=3)p_k(t,k)*pi_e(t,k)+ 
          sum(k in agregadores)(r_kup(t,k)*pi_kcapup(t,k)+r_kdn(p,k)*pi_kcapdn(t,k)+ 
          r_kup(t,k)*s_dn(t)*mu_up(t)*pi_kmilup(t,k)+r_kdn(t,k)*s_dn(t)*mu_dn(t)*pi_kmildn(t,k))- 
          sum(k in agregadores|k=1)p_k(t,k)*pi_ek(t,k)) 
          
 !Restricciones DRAGs
 forall(t in periodos, k in agregadores) do 
	  if(k=1) then
	    p_k(t,k)-r_kcapdn(t,k)>=0 !R(2) 	 
	    p_k(t,k)-r_kcapup(t,k)<=p_ak1_max !R(3) 	 
	    p_k(t,k)>=0 !R(4) 	 
	    p_k(t,k)<=p_ak1_max 	
	    r_kcapup(t,k)>=0 !R(5) 	 
	    r_kcapup(t,k)<=r_k1_capupmax 	 
	    r_kcapdn(t,k)>=0 !R(6) 	 
	    r_kcapdn(t,k)<=r_k1_capdnmax 	
	    end-if 
 end-do 
 
 !Restricciones ESAGs (CONDICIONES INICIALES(?)) 
 
 !restriccion de inventario periodo 1
 p_k(1,2)=e_k20-e_k2(1)+(1/eta_di)*r_kcapup(1,2)*mu_up(1)-eta_ch*r_kcapdn(1,2)*mu_dn(1) !R(7) 	
 
 !restriccion de inventario otros periodos
 forall(t in 2..munPeriodos)do 
 	p_k(t,2)=e_k2(t-1)-e_k2(t)+(1/eta_di)*r_kcapup(t,2)*mu_up(t)-eta_ch*r_kcapdn(t,2)*mu_dn(t) !R(7) 	
 end-do
 !otras restricciones
 forall(t in periodos,k in agregadores)do 	
	  if(k=2) then 	 
	      !p_k(t,k)=e_k2(t-1)-e_k2(t)+(1/eta_di)*r_kcapup(t,k)*mu_up(t)-eta_ch*r_kcapdn(t,k)*mu_dn(t) !R(7) 	 
	      p_k(t,k)=(1/eta_di)*p_k2di(t)-eta_ch*p_k2tch(t) !R(8) 	 
	      r_kcapup(t,k)=r_k2capup_di(t)+r_k2capdn_ch(t) !R(9) 	
	      r_kcapdn(t,k)=r_k2capdn_di(t)+r_k2capup_ch(t) !R(10) 	 
	      e_k2(t)>=e_min !R(11) 	 
	      e_k2(t)<=e_max 	 
	      b_k2(t) is_binary 	
	      p_k2di(t)>=0 !R(12) 	 
	      p_k2di(t)<=b_k2(t)*dr_max 	 
	      r_k2capup_di(t)>=0 !R(13) 	 
	      r_k2capup_di(t)<=b_k2(t)*dr_max 	 
	      r_k2capdn_di(t)>=0 !R(14) 	 
	      r_k2capdn_di(t)<=b_k2(t)*dr_max 	 
	      p_k2ch(t)>=0 !R(15) 	 
	      p_k2ch(t)<=(1-b_k2(t))*cr_max 	 
	      r_k2capup_ch(t)>=0 !R(16) 	 
	      r_k2capup_ch(t)<=(1-b_k2(t))*cr_max 	 
	      r_k2capdn_ch(t)>=0 !R(17) 	 
	      r_k2capdn_ch(t)<=(1-b_k2(t))*cr_max 	 
	      p_k2di(t)>=r_k2capdn_di(t) !R(18) 	
	      p_k2di(t)<=dr_max-r_k2capup_di(t) 	 
	      p_k2ch(t)>=r_k2capdn_ch(t) !R(19) 	 
	      p_k2di(t)<=cr_max-r_k2capup_ch(t)	 	
	   end-if 
end-do

!Restricciones EVCSs
forall(t in periodos, k in agregadores)do
	if(k=3)then
		b_k3(t) is_binary
		p_k(t,k)>=0 !R(20)
		p_k(t,k)<=er_max*b_k3(t)
		r_kcapup(t,k)>=0 !R(21)
		r_kcapup(t,k)<=err_max*b_k3(t)
		r_kcapdn(t,k)>=0 !R(22)
		r_kcapdn(t,k)<=err_max*b_k3(t)
		p_k(t,k)+r_kcapup(t,k)<=er_max !R(23)
		p_k(t,k)-r_kcapdn(t,k)>=0 !R(24)
		!R(25)
		e_int*b_k3(t)+sum(t in Tsub)(p_k(t,k)+r_kcapup(t,k)*mu_up(t)-r_kcapdn(t,k)*mu_dn(t))*gamma_ch>=0.9*cl_max*b_k3(t)
		e_int*b_k3(t)+sum(t in Tsub)(p_k(t,k)+r_kcapup(t,k)*mu_up(t)-r_kcapdn(t,k)*mu_dn(t))*gamma_ch<=cl_max*b_k3(t)
	end-if
end-do 

!Restricciones DDGAGs
forall(t in periodos, k in agregadores) do
	if(k=4) then
		p_k(t,k)+r_kcapup(t,k)<=p_k4max !R(26)
		p_k(t,k)-r_kcapdn(t,k)>=P_k4min !R(27)
		r_kcapup(t,k)>=0 !R(28)
		r_kcapup(t,k)<=ru 
		r_kcapdn(t,k)>=0 !R(29)
		r_kcapdn(t,k)<=rd 
	end-if
end-do

!Restricciones de flujos de potencia activa, R(30)
forall(t in periodos,b in barras) do
	h(b,1)*p_k(t,1) + h(b,3)*p_k(t,3)+p_d(b,t) -  h(b,2)*p_k(t,2)- h(b,4)*p_k(t,4)
		+ h_sub(b)*p_sub(t) +sum(l in lineas)pl(l,t)*a(l,b) = 0		
	pl(l,t) is_free	
end-do
!Restricciones de flujos de potencia reactiva, R(31)
forall(t in periodos,b in barras) do
	h(b,1)*p_k(t,1)*tan_phi_k1  +q_d(b,t) - h(b,4)*p_k(t,4)*tan_phi_k4
		+ h_sub(b)*q_sub(t) +sum(l in lineas)ql(l,t)*a(l,b) = 0		
	ql(l,t) is_free	
end-do
!Restricciones de voltaje, R(32)
forall(t in periodos, m in barras, n in barras,l in lineas) do
	if (c(m,n)=1 and a(l,n))then
		v(m,t)=v(n,t)-(r(l)*pl(l,t)+x(l)+ql(l,t))
	end-if
end-do
!Restricciones maximo y minimo
forall(t in periodos, n in barras) do
	v(n,t)>=v_min !R(34)
	v(n,t)<=v_max
end-do
!Restricciones flujo
forall(t in periodos, l in lineas) do
	pl(l,t)>=-pl_max !R(34)
	pl(l,t)<=ql_max
	ql(l,t)>=-pl_max !R(34)
	ql(l,t)<=ql_max
end-do
!Restricciones suma ofertas
forall(t in periodos) do
	r_subup(t)=
end-do

if PROJECTDIR <> '' then
  setparam('workdir', PROJECTDIR)
  writeln("Project directory: " + PROJECTDIR)
end-if

writeln("Begin running model")
!...
writeln("End running model")

end-model
